import streamlit as st
import plotly.express as px
import numpy as np
import pandas as pd

# Title of the web application

st.title('Price Optimization')

st.write('Welcome!')


from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

# Carga tus datos
final = pd.read_csv('final.csv')
print(final)

# Configuración del modelo
rf = RandomForestRegressor(n_estimators=1000, min_samples_leaf=0.2)
X = final.drop('Price', axis=1)
y = final['Price']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)
rf.fit(X_train, y_train)

date_input = st.date_input("Please enter the date: ")
quantity_kilos = st.number_input("Please enter the forecast for this day:", min_value=0.0, format='%f')
customer_name = st.text_input("Please enter the customer name")
customer_price = st.number_input("Please enter the price payed by the customer:", min_value=0.0, format='%f')
customer_kilos = st.number_input("Please enter the quantity demanded by this customer: ", min_value=0.0, format='%f')

def predict_price_for_specific_date():

    if st.button('Calculate price and profit'):        
        row = final[(final['Dia'] == date_input.day) & (final['Mes'] == date_input.month) & (final['Año'] == date_input.year)]

        if row.empty:
            st.error("No data available for this date")
            return
        
        real_price = row['Price'].iloc[0] if 'Price' in row else None
        real_price = real_price / 100

        row = row.drop(columns=['Price'])

        prediction = rf.predict(row)
        prediction = prediction / 100
        predicted_value = prediction[0] if prediction.size > 0 else "Prediction not possible"

        
        customer = customer_price * customer_kilos
        profit = float((customer_price - real_price) * customer_kilos)

        st.write(f"Predicted price for the date {date_input}  is: {round(predicted_value, 2)}€.")
        st.write(f"Real price for the date {date_input}  is: {round(real_price, 2)}€.")
        st.write(f"Quantity of kgs in forecast for the date {date_input}  is: {int(quantity_kilos)} kgs.")
        st.write(f"The prediction difference is: {round(real_price - predicted_value, 2)}€.")
        st.write(f"{customer_name} is going to pay: {customer_price}€.")
        st.write(f"Quantity of kgs demanded by {customer_name} is: {int(customer_kilos)} kgs.")
        st.write(f"Total money generated by {customer_name} is: {customer}€.")
        st.write(f"Return generated by {customer_name} is: {profit}€.")
        st.write(f"After supplying {customer_name} we have: {int(quantity_kilos - customer_kilos)} kgs.")


predict_price_for_specific_date()
st.markdown(f'<span style="font-size:24px;">{"**Now we need to figure out how to recoup that loss.**"}</span>', unsafe_allow_html=True)
st.write("Now i'm gonna ask you for a daily benefit, to make it realistic, it should be between 0-5%")
benefit_target = st.number_input("Please enter the percentage of profit you would like to make:", min_value = 0.0, format='%f')

kgs_left = quantity_kilos - customer_kilos

def loss_recoup():
    if st.button('Target'):
        row = final[(final['Dia'] == date_input.day) & (final['Mes'] == date_input.month) & (final['Año'] == date_input.year)]
        row = row.drop('Price', axis = 1)
        prediction = rf.predict(row)
        prediction = prediction / 100
        predicted_value = prediction[0] if prediction.size > 0 else "Prediction not possible"          
        target = predicted_value + (predicted_value * (benefit_target / 100))
        st.write(f"Our sales target is: {round(target, 2)}€.")
        st.write(f"We have {round(kgs_left, 2)} left after supplying {customer_name}")
        st.write(f"Then we need a profit of {kgs_left * target}€ in order to recoup that loss.")

loss_recoup()

st.write(f'<span style="font-size:24px;">{"**Now, we are going to simulate a real situation where some customers give us different offers**"}</span>', unsafe_allow_html=True)
import itertools 
import random


