import pandas as pd
import os
from datetime import datetime

final = pd.read_csv('final.csv')
print(final)

# En lugar de hacerlo con random forest lo vamos a hacer con Prophet.

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split

rf = RandomForestRegressor(n_estimators=1000, min_samples_leaf = 0.2)

X = final.drop('Price', axis = 1)
y = final['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state=123)
rf.fit(X_train, y_train)

def predict_price_for_specific_date():
    # Solicita al usuario que introduzca la fecha y la cantidad
    day = int(input("Introduce el día: "))
    month = int(input("Introduce el mes: "))
    year = int(input("Introduce el año: "))
    quantity_kilos = float(input("Introduce la previsión (en kilos) que tenemos para este día: "))
    customer_name = str(input("Introduce el nombre del cliente: "))
    customer_price = float(input("Introduce el precio pagado por el cliente: "))
    customer_kilos = float(input("Introduce la cantidad que se va a llevar este cliente: "))
    
    # Filtra el DataFrame para obtener la fila que coincide con la fecha
    row = final[(final['Dia'] == day) & (final['Mes'] == month) & (final['Año'] == year)]
    
    # Si no se encuentra ninguna fila, no podemos hacer una predicción
    if row.empty:
        print("No data available for this date")
        return
    
    # Guarda el precio real para calcular luego el beneficio o la pérdida
    real_price = row['Price'].iloc[0] if 'Price' in row else None
    real_price = real_price / 100
    
    # Elimina la columna 'Price' antes de hacer la predicción si es necesario
    row = row.drop(columns=['Price'])
    
    # Realiza la predicción
    prediction = rf.predict(row)
    prediction = prediction / 100
    predicted_value = prediction[0] if prediction.size > 0 else "Prediction not possible"
    
    # Calcula el valor predicho y real basado en la cantidad proporcionada
    predicted_revenue = predicted_value * quantity_kilos
    real_revenue = real_price * quantity_kilos if real_price is not None else "Real price not available"
    customer = customer_price * customer_kilos
    profit = float((customer_price - real_price) * customer_kilos)

    
    # Calcula el beneficio o la pérdida
    if isinstance(predicted_revenue, str) or isinstance(real_revenue, str):
        print("Cannot calculate profit/loss due to missing data")
    else:
        profit_loss = real_revenue - predicted_revenue
        diff = real_price - prediction
        diff = float(diff)
        print(f"Predicted price for the day {day}/{month}/{year} is: {round(float(predicted_value), 2)}€")
        print(f"Real price for the day {day}/{month}/{year} is: {round(float(real_price), 2)}€")
        print(f"Quantity of kgs in forecast for the day {day}/{month}/{year} is: {int(quantity_kilos)} kgs.")
        print(f"The prediction difference in {quantity_kilos} kgs is: {round(float(profit_loss), 2)}€")
        print(f"{customer_name} is going to pay: {customer_price}€")
        print(f"Quantity of kgs demanded by {customer_name} is: {int(customer_kilos)} kgs.")
        print(f"Total money generated by {customer_name} is: {round(float(customer), 2)}€")
        print(f"Return generated by {customer_name} is: {round(float(profit), 2)}€")
        

predict_price_for_specific_date()



